{"version":3,"sources":["MenuList.js","Company.js","App.js","serviceWorker.js","index.js"],"names":["MenuList","this","props","children","maxHeight","console","log","length","height","itemCount","itemSize","index","style","React","Component","Company","details","price","name","className","App","state","selectedOption","symbol","handleChange","selectedSymbol","label","fetch","then","response","json","data","setState","catch","error","symbols","map","value","iexId","filterOption","createFilter","ignoreAccents","components","options","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAuBeA,E,iLAhBH,IAAD,EACyBC,KAAKC,MAA7BC,EADD,EACCA,SAAUC,EADX,EACWA,UAGlB,OAFAC,QAAQC,IAAIH,EAASI,QAGnB,kBAAC,IAAD,CACEC,OAAQJ,EACRK,UAAWN,EAASI,OACpBG,SAZO,IAcN,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsB,yBAAKA,MAAOA,GAAQT,EAASQ,U,GAXrCE,IAAMC,WCSZC,EAZD,SAAAb,GACZG,QAAQC,IAAIJ,GACZG,QAAQC,IAAkC,oBAAvBJ,EAAMc,QAAQC,OAFZ,MAGCf,EAAMc,QAArBE,EAHc,EAGdA,KAAMD,EAHQ,EAGRA,MACb,OACE,6BACE,4BAAKC,GACY,oBAATD,EAAuB,mDAAwB,0BAAOE,UAAsB,kCAAVF,EAA4C,iBAAmB,oBAAlF,IAAyGA,IAAqB,K,MCqE9KG,M,2MAvEbC,MAAQ,CACNC,eAAgB,GAChBC,OAAQ,I,EAGVC,aAAe,SAAAF,GAEbjB,QAAQC,IAAR,mBAAgCgB,GAChC,IAAIG,EAAiBH,EAAeI,MAEpCC,MAAM,0BAA4BF,GAC/BG,KAAK,SAAAC,GACJ,OAAOA,EAASC,SACfF,KAAK,SAAAG,GACN1B,QAAQC,IAAIyB,GACRA,EAAKxB,OAAS,EAChBe,EAAeL,MAAQc,EAAK,GAAGd,MAAQ,OAEvCK,EAAeL,MAAQ,gCAEzB,EAAKe,SAAS,CAAEV,mBAChBjB,QAAQC,IAAI,EAAKe,SAChBY,MAAM,SAACC,GACR7B,QAAQC,IAAI4B,GACZ,EAAKF,SAAS,CAAEV,sB,mFAKD,IAAD,OAClBK,MAAM,yBACHC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SACfF,KAAK,SAAAG,GAgCd,IAAsBI,EA/Bd,EAAKH,SAAS,CACZT,QA8BYY,EA9BSJ,EA+BtBI,EAAQC,IAAI,SAACb,GAClB,MAAO,CAAEG,MAAOH,EAAOA,OAAQc,MAAOd,EAAOe,MAAOpB,KAAMK,EAAOL,aA9B5De,MAAM,SAACC,GACR7B,QAAQC,IAAI4B,O,+BAMhB,OACE,yBAAKf,UAAU,mBACb,yDACA,kBAAC,IAAD,CACEA,UAAU,aACVoB,aAAcC,YAAa,CAAEC,eAAe,IAC5CC,WAAY,CAAE1C,YACd2C,QAAS1C,KAAKoB,MAAME,OACpBqB,SAAU3C,KAAKuB,eAEjB,yBAAKL,UAAU,mBACb,kBAAC,EAAD,CAASH,QAASf,KAAKoB,MAAMC,uB,GAxDrBT,IAAMC,WCKJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.31d45440.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FixedSizeList as List } from \"react-window\";\r\n\r\nconst height = 35;\r\nconst maxHeight = 60;\r\n\r\nclass MenuList extends React.Component {\r\n  render() {\r\n    const { children, maxHeight } = this.props;\r\n    console.log(children.length);\r\n   \r\n    return (\r\n      <List\r\n        height={maxHeight}\r\n        itemCount={children.length}\r\n        itemSize={height}\r\n      >\r\n        {({ index, style }) => <div style={style}>{children[index]}</div>}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuList;\r\n","import React from 'react';\r\n\r\n//Company details stateless component - Renders the companyName and stockPrice based on user selection\r\nconst Company = props => {\r\n    console.log(props);\r\n    console.log(typeof props.details.price != \"undefined\");\r\n    const {name, price} = props.details;\r\n    return (\r\n      <div>\r\n        <h3>{name}</h3>\r\n        {typeof price != \"undefined\" ? <h4>Current Stock Price:<span  className= {price !== \"Current price not available !\" ? \"priceAvailable\" : \"priceUnavailable\" }> {price}</span></h4> : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Company;","import React from 'react';\nimport Select, { createFilter } from \"react-select\";\nimport MenuList from \"./MenuList\"\nimport Company from \"./Company\"\nimport './App.css';\n\n//Main component which loads symbols accepts user selection\nclass App extends React.Component {\n  state = {\n    selectedOption: [],\n    symbol: []\n  };\n\n  handleChange = selectedOption => {\n\n    console.log(`Option selected:`, selectedOption);\n    let selectedSymbol = selectedOption.label;\n\n    fetch('/api/tops/last?symbols=' + selectedSymbol)\n      .then(response => {\n        return response.json();\n      }).then(data => {\n        console.log(data);\n        if (data.length > 0) {\n          selectedOption.price = data[0].price + ' USD';\n        } else {\n          selectedOption.price = \"Current price not available !\"\n        }\n        this.setState({ selectedOption });\n        console.log(this.state)\n      }).catch((error) => {\n        console.log(error);\n        this.setState({ selectedOption });\n      });;\n  };\n\n  //Load all symbols form API once the component gets mounted\n  componentDidMount() {\n    fetch('/api/ref-data/symbols')\n      .then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({\n          symbol: parseSymbols(data),\n        });\n      }).catch((error) => {\n        console.log(error);\n\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"parentContainer\">\n        <h4>Pick your company symbol:</h4>\n        <Select\n          className=\"selectPick\"\n          filterOption={createFilter({ ignoreAccents: false })}\n          components={{ MenuList }}\n          options={this.state.symbol}\n          onChange={this.handleChange}\n        />\n        <div className=\"selectedDetails\">\n          <Company details={this.state.selectedOption} />\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\n//Helper funciton to build select dropdown\nfunction parseSymbols(symbols) {\n  return symbols.map((symbol) => {\n    return { label: symbol.symbol, value: symbol.iexId, name: symbol.name };\n  });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}